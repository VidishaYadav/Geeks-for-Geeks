import java.util.ArrayList;

/*****************
* Main function - 
*
	public static void main(String[] args) {
		PQ pq = new PQ();
		int choice = s.nextInt();
		while(choice != -1) {
			switch(choice) {
				case 1 : // insert
					int element = s.nextInt();
					pq.insert(element);
					break;
				case 2 : // getMin
				try {
					System.out.println(pq.getMin());
				} catch (PriorityQueueException e) {
					return;
				}
					break;
				case 3 : // removeMin
				try {
					System.out.println(pq.removeMin());
				} catch (PriorityQueueException e) {
					return;
				}
					break;
				case 4 : // size
					System.out.println(pq.size());
					break;
				case 5 : // isEmpty
					System.out.println(pq.isEmpty());
				default :
						return;
			}
			choice = s.nextInt();
		}
	}
*******************/

class PriorityQueueException extends Exception {

}

public class PQ {

	private ArrayList<Integer> heap;

	public PQ() {
		heap = new ArrayList<Integer>();
	}

	boolean isEmpty(){
		return heap.size() == 0;
	}

	int size(){
		return heap.size();
	}

	int getMin() throws PriorityQueueException{
		if(isEmpty()){
			// Throw an exception
			throw new PriorityQueueException();
		}
		return heap.get(0);
	}


    void insert(int element)
    {
        heap.add(element);
        int childIndex = heap.size()-1;
        int parentIndex = (childIndex-1)/2;
        
        while(childIndex > 0)
        {
            if(heap.get(childIndex) < heap.get(parentIndex))
            {
                int temp = heap.get(parentIndex);
                heap.set(parentIndex,heap.get(childIndex));
                heap.set(childIndex,temp);
                childIndex = parentIndex;
                parentIndex = (childIndex-1)/2;
            }
            else 
                return;
        
        }
    }

	int removeMin() throws PriorityQueueException{
		// Complete this function
		// Throw the exception PriorityQueueException if queue is empty
      if(isEmpty()){
			// Throw an exception
			throw new PriorityQueueException();
		}
		  int num = heap.get(0);
        heap.set(0,heap.get(heap.size()-1));
        heap.remove(heap.size()-1);
        int index = 0;
        int minindex = index;
        int leftchild = 1;
        int rightchild = 2;
        
        while(leftchild < heap.size())
        {
            if(heap.get(leftchild) < heap.get(minindex))
                minindex=leftchild;
            if( (rightchild < heap.size()) && ( heap.get(rightchild) < heap.get(minindex)))
                minindex=rightchild;
            if(minindex == index)
                return num;
            else
            {
                int temp = heap.get(minindex);
                heap.set(minindex,heap.get(index));
                heap.set(index,temp);
                index = minindex;
                leftchild = 2*index + 1;
                rightchild = 2*index +2;
            }
        }
        return num;
}
}
